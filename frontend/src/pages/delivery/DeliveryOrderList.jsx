import React, { useState } from "react";
import api from "../../services/api";
import PropTypes from 'prop-types';

const statusOptions = [
  { value: '', label: 'T·∫•t c·∫£' },
  { value: 'ƒêang x·ª≠ l√Ω', label: 'ƒêang x·ª≠ l√Ω' },
  { value: 'ƒêang giao', label: 'ƒêang giao' },
  { value: 'ƒê√£ giao', label: 'ƒê√£ giao' },
  { value: 'ƒê√£ h·ªßy', label: 'ƒê√£ h·ªßy' },
];

const DeliveryOrderList = ({ orders = [], confirmMode = false, onReloadOrders }) => {
  const [selected, setSelected] = useState(null);
  const [statusFilter, setStatusFilter] = useState('');
  const [updating, setUpdating] = useState(false);
  const [successMsg, setSuccessMsg] = useState("");

  const handleConfirmPickup = async (id) => {
    setUpdating(true);
    try {
      await api.put(`/api/v1/orders/${id}/delivery-confirm`);
      setSuccessMsg("ƒê√£ x√°c nh·∫≠n l·∫•y h√†ng!");
      if (onReloadOrders) onReloadOrders();
    } catch {
      setSuccessMsg("Kh√¥ng th·ªÉ x√°c nh·∫≠n l·∫•y h√†ng!");
      setTimeout(() => setSuccessMsg(""), 2000);
    } finally {
      setUpdating(false);
    }
  };

  const handleMarkDelivered = async (id) => {
    setUpdating(true);
    try {
      await api.put(`/api/v1/orders/${id}/delivered`);
      setSuccessMsg("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i: ƒê√£ giao!");
      if (onReloadOrders) onReloadOrders();
    } catch {
      setSuccessMsg("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
      setTimeout(() => setSuccessMsg(""), 2000);
    } finally {
      setUpdating(false);
    }
  };

  const handleMarkFailed = async (id) => {
    setUpdating(true);
    try {
      await api.put(`/api/v1/orders/${id}/failed`);
      setSuccessMsg("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i: Kh√¥ng th√†nh c√¥ng!");
      if (onReloadOrders) onReloadOrders();
    } catch {
      setSuccessMsg("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
      setTimeout(() => setSuccessMsg(""), 2000);
    } finally {
      setUpdating(false);
    }
  };

  const filteredOrders = statusFilter
    ? orders.filter((o) => o.status === statusFilter)
    : orders;

  return (
    <div className="bg-green-50 min-h-screen py-10 px-4">
      <h2 className="text-2xl font-bold text-green-700 mb-6 flex items-center gap-2"><span role="img" aria-label="fruit">üçä</span> Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
      <div className="flex items-center gap-3 mb-4">
        <label className="font-semibold text-green-700">L·ªçc theo tr·∫°ng th√°i:</label>
        <select
          className="border border-green-300 rounded px-3 py-2 focus:outline-none focus:border-green-500"
          value={statusFilter}
          onChange={e => setStatusFilter(e.target.value)}
        >
          {statusOptions.map(opt => (
            <option key={opt.value} value={opt.value}>{opt.label}</option>
          ))}
        </select>
      </div>
      <div className="overflow-x-auto">
        <table className="w-full border border-green-200 rounded-lg bg-white">
          <thead className="bg-green-100">
            <tr>
              <th className="py-2 px-3">M√£ ƒë∆°n</th>
              <th className="py-2 px-3">Kh√°ch h√†ng</th>
              <th className="py-2 px-3">Ng√†y ƒë·∫∑t</th>
              <th className="py-2 px-3">Tr·∫°ng th√°i</th>
              <th className="py-2 px-3">T·ªïng ti·ªÅn</th>
              <th className="py-2 px-3">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.length === 0 ? (
              <tr><td colSpan={6} className="text-center py-6 text-gray-400">Kh√¥ng c√≥ ƒë∆°n h√†ng</td></tr>
            ) : (
              filteredOrders.map((o, idx) => (
                <tr key={o._id || idx} className="border-t border-green-50">
                  <td className="py-2 px-3 font-semibold text-green-700">{o._id}</td>
                  <td className="py-2 px-3">{o.shippingInfo?.name || '·∫®n danh'}</td>
                  <td className="py-2 px-3">{o.createdAt?.slice(0,10)}</td>
                  <td className="py-2 px-3">
                    <span className={`px-2 py-1 rounded text-xs font-bold ${o.status === 'ƒê√£ giao' ? 'bg-green-200 text-green-700' : o.status === 'ƒêang giao' ? 'bg-blue-100 text-blue-700' : o.status === 'ƒê√£ h·ªßy' ? 'bg-red-100 text-red-600' : 'bg-yellow-100 text-yellow-700'}`}>{o.status || 'ƒêang x·ª≠ l√Ω'}</span>
                  </td>
                  <td className="py-2 px-3 text-green-600 font-bold">{o.totalAmount?.toLocaleString()}‚Ç´</td>
                  <td className="py-2 px-3 flex gap-2">
                    {confirmMode ? (
                      <button onClick={() => handleConfirmPickup(o._id)} className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 transition-colors" disabled={updating}>X√°c nh·∫≠n l·∫•y h√†ng</button>
                    ) : o.status === 'ƒêang giao' ? (
                      <>
                        <button onClick={() => handleMarkDelivered(o._id)} className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition-colors" disabled={updating}>ƒê√£ giao</button>
                        <button onClick={() => handleMarkFailed(o._id)} className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition-colors" disabled={updating}>Kh√¥ng th√†nh c√¥ng</button>
                      </>
                    ) : null}
                    <button onClick={() => setSelected(o)} className="bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200 transition-colors">Xem</button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
      {selected && (
        <div className="fixed inset-0 flex items-center justify-center z-50" style={{backdropFilter: 'blur(6px)'}}>
          <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-lg relative border-2 border-green-200">
            <button onClick={() => setSelected(null)} className="absolute top-3 right-3 text-gray-400 hover:text-green-600 text-3xl font-bold">√ó</button>
            <h2 className="text-2xl font-bold text-green-700 mb-4 text-center">Chi ti·∫øt ƒë∆°n h√†ng</h2>
            <div className="mb-3 flex flex-col md:flex-row md:justify-between gap-2">
              <div className="text-gray-700">M√£ ƒë∆°n: <span className="font-semibold text-green-700">{selected._id}</span></div>
              <div className="text-gray-700">Ng√†y ƒë·∫∑t: <span className="font-semibold">{selected.createdAt?.slice(0,10)}</span></div>
            </div>
            <div className="mb-3 text-gray-700">Tr·∫°ng th√°i: <span className={`font-bold px-2 py-1 rounded ${selected.status === 'ƒê√£ giao' ? 'bg-green-200 text-green-700' : selected.status === 'ƒêang giao' ? 'bg-blue-100 text-blue-700' : selected.status === 'ƒê√£ h·ªßy' ? 'bg-red-100 text-red-600' : 'bg-yellow-100 text-yellow-700'}`}>{selected.status || 'ƒêang x·ª≠ l√Ω'}</span></div>
            <div className="mb-3 text-gray-700">T·ªïng ti·ªÅn: <span className="font-bold text-2xl text-green-600">{selected.totalAmount?.toLocaleString()}‚Ç´</span></div>
            <div className="mb-3 text-gray-700">Th√¥ng tin kh√°ch h√†ng:</div>
            <div className="mb-4 bg-green-50 rounded-lg p-3 border border-green-100">
              <div><span className="font-semibold">T√™n:</span> {selected.shippingInfo?.name}</div>
              <div><span className="font-semibold">SƒêT:</span> {selected.shippingInfo?.phoneNo}</div>
              <div><span className="font-semibold">ƒê·ªãa ch·ªâ:</span> {selected.shippingInfo?.address}, {selected.shippingInfo?.city}</div>
            </div>
            <div className="mb-2 text-gray-700 font-semibold">S·∫£n ph·∫©m:</div>
            <div className="overflow-x-auto">
              <table className="w-full text-sm border border-green-100 rounded-lg mb-4">
                <thead className="bg-green-100">
                  <tr>
                    <th className="py-2 px-2">T√™n</th>
                    <th className="py-2 px-2">SL</th>
                    <th className="py-2 px-2">Gi√°</th>
                    <th className="py-2 px-2">T·ªïng ph·ª•</th>
                  </tr>
                </thead>
                <tbody>
                  {(selected.items || []).map((item, idx) => (
                    <tr key={idx} className="border-t border-green-50">
                      <td className="py-2 px-2 font-semibold text-green-700">{item.name}</td>
                      <td className="py-2 px-2 text-center">{item.quantity}</td>
                      <td className="py-2 px-2">{item.price?.toLocaleString()}‚Ç´</td>
                      <td className="py-2 px-2 font-bold">{(item.price * item.quantity).toLocaleString()}‚Ç´</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <button onClick={() => setSelected(null)} className="w-full mt-2 bg-green-600 text-white font-bold py-3 rounded-lg hover:bg-green-700 transition-colors text-lg">ƒê√≥ng</button>
          </div>
        </div>
      )}
    </div>
  );
};

DeliveryOrderList.propTypes = {
  orders: PropTypes.array,
  confirmMode: PropTypes.bool,
  onReloadOrders: PropTypes.func
};

export default DeliveryOrderList; 